JavaScript全栈教程


1. JavaScript简介

	ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。
	JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。
	
2. 快速入门
	
	1）JavaScript代码可以直接嵌在网页的任何地方，不过通常我们都把JavaScript代码放到<head>中。
	   由<script>...</script>包含的代码就是JavaScript代码，它将直接被浏览器执行。
	
	2）第二种方法是把JavaScript代码放到一个单独的.js文件，然后在HTML中通过<script src="..."></script>引入这个文件。
	
	3）<script>标签还设置了一个type属性，这是没有必要的，因为默认的type就是JavaScript，所以不必显式地把type指定为JavaScript。
	
	4）掌握Chrome浏览器调试技巧。
	
3. 基本语法

	1）每个语句以;结束，语句块用{...}。
	   JavaScript并不强制要求在每个语句的结尾加;浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上。（不建议）
	   
	2）//开头直到行末的字符被视为行注释，注释是给开发人员看到，JavaScript引擎会自动忽略。
	   用/*...*/把多行字符包裹起来，把一大“块”视为一个注释。
	   
	3）JavaScript严格区分大小写，如果弄错了大小写，程序将报错或者运行不正常。
	
4. 数据类型和变量

	1）Number
	   
	   JavaScript不区分整数和浮点数，统一用Number表示。
	   NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示
	   Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity
	   十六进制用0x前缀和0-9，a-f表示，例如：0xff00
	   
	2）字符串
	
	   字符串是以单引号'或双引号"括起来的任意文本，比如'abc'，"xyz"等等。
	   请注意，''或""本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。
	   
	3）布尔值
	
	   布尔值和布尔代数的表示完全一致，一个布尔值只有true、false两种值，要么是true，要么是false。
	   可以直接用true、false表示布尔值，也可以通过布尔运算计算出来。 如：2 > 1; // 这是一个true值
	   
	4）比较运算符
	
	   a）相等运算符
	   
	      第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；
	      第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。

          由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。

	   b）NaN
	   
          NaN这个特殊的Number与所有其他值都不相等，包括它自己：NaN === NaN; // false
          唯一能判断NaN的方法是通过isNaN()函数：isNaN(NaN); // true
		  
	   c）浮点数的相等比较
	   
		  1 / 3 === (1 - 2 / 3); // false
          这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。
		  要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true
	
	   d）null和undefined
	   
	      null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”。
		  undefined表示值未定义。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。
		  
	5）数组
	   
	   数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。
	   数组用[]表示，元素之间用,分隔。
	   另一种创建数组的方法是通过Array()函数实现：new Array(1, 2, 3); // 创建了数组[1, 2, 3]
	   建议直接使用[]，索引的起始值为0。如var arr = [1, 2, 3.14, 'Hello', null, true];  arr[6]; // 索引超出了范围，返回undefined
		  
	6）对象
	   
	   JavaScript的对象是一组由键-值组成的无序集合，例如：
		var person = {
			name: 'Bob',
			age: 20,
			tags: ['js', 'web', 'mobile'],
			city: 'Beijing',
			hasCar: true,
			zipcode: null
		};
	   JavaScript对象的键都是字符串类型，值可以是任意数据类型。
	   每个键又称为对象的属性。要获取一个对象的属性，用对象变量.属性名的方式。 person.name; // 'Bob'
	   
	7）变量
	
	   变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且不能用数字开头。
	   变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句，使用等号=对变量进行赋值。只能用var申明一次。
	   要显示变量的内容，可以用console.log(x); 代替alert()的好处是可以避免弹出烦人的对话框。
	   
	8）strict模式
	
	   不用var申明的变量会被视为全局变量，为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式。
	   启用strict模式的方法是在JavaScript代码的第一行写上：'use strict';
	   这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。
	
5. 字符串

    1）JavaScript的字符串就是用''或""括起来的字符表示。
	转义字符\。\n表示换行，\t表示制表符，字符\本身也要转义，用\\表示。
	ASCII字符可以以\x##形式的十六进制表示，用\u####表示一个Unicode字符。
	ES6标准新增了一种多行字符串的表示方法，用反引号 ` ... ` 表示。
	
	2）要把多个字符串连接起来，可以用+号连接。
	   ES6新增了一种模板字符串，用${}取值。
	  'use strict';
	  // 如果浏览器支持模板字符串，将会替换字符串内部的变量:
          var name = '小明';
          var age = 20;
	  console.log(`你好, ${name}, 你今年${age}岁了!`);
	  console.log('你好，' + name + '，你今年' + age + '岁了！');

	3）要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：
	   字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。
	   var s = 'Test';
	   s[0] = 'X';
           alert(s); // s仍然为'Test'
	   
	 4）JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串。
	   toUpperCase()把一个字符串全部变为大写
	   toLowerCase()把一个字符串全部变为小写
	   indexOf()会搜索指定字符串出现的位置，没有找到指定的子串，返回-1
	   substring()返回指定索引区间的子串：
		var s = 'hello, world'
		s.substring(0, 5); // 从索引0开始到5（不包括5），返回'hello'
		s.substring(7); // 从索引7开始到结束，返回'world'
		
6. 数组

    1）要取得Array的长度，直接访问length属性。
	直接给Array的length赋一个新的值会导致Array大小的变化。
	Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array，
	如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化。
	在编写代码时，不建议直接修改Array的大小，访问索引时要确保索引不会越界。
	
	2）Array也可以通过indexOf()来搜索一个指定的元素的位置。
	
	3）slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array。
	   slice()的起止参数包括开始索引，不包括结束索引。
       如果不给slice()传递任何参数，它就会从头到尾截取所有元素。
        var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	var aCopy = arr.slice();
	aCopy; // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
	aCopy === arr; // false
	   
	4）push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉。
		var arr = [1, 2];
		arr.push('A', 'B'); // 返回Array新的长度: 4
		arr; // [1, 2, 'A', 'B']
		arr.pop(); // pop()返回'B'
		arr; // [1, 2, 'A']
		arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次
		arr; // []
		arr.pop(); // 空数组继续pop不会报错，而是返回undefined
		arr; // []
	
	5）往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉。
		var arr = [1, 2];
		arr.unshift('A', 'B'); // 返回Array新的长度: 4
		arr; // ['A', 'B', 1, 2]
		arr.shift(); // 'A'
		arr; // ['B', 1, 2]
		arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
		arr; // []
		arr.shift(); // 空数组继续shift不会报错，而是返回undefined
		arr; // []
	
	6）sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序。
		var arr = ['B', 'C', 'A'];
		arr.sort();
		arr; // ['A', 'B', 'C']
	
	7）reverse()把整个Array的元素给掉个个，也就是反转。
		var arr = ['one', 'two', 'three'];
		arr.reverse(); 
		arr; // ['three', 'two', 'one']
		
	8）splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素。
		var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
		// 从索引2开始删除3个元素,然后再添加两个元素:
		arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
		arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
		// 只删除,不添加:
		arr.splice(2, 2); // ['Google', 'Facebook']
		arr; // ['Microsoft', 'Apple', 'Oracle']
		// 只添加,不删除:
		arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
		arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
		
	9）concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array。
	   concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里。
	   	var arr = ['A', 'B', 'C'];
		arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]

	10）join()方法把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串。
	    如果Array的元素不是字符串，将自动转换为字符串后再连接。
		var arr = ['A', 'B', 'C', 1, 2, 3];
		arr.join('-'); // 'A-B-C-1-2-3'
		
	11) 多维数组：数组的某个元素又是一个Array，则可以形成多维数组，例如：
		'use strict';
		var arr = [[1, 2, 3], [400, 500, 600], '-'];
		var x = arr[1][1];  //x 为 500
	
7. 对象

	1）JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。
	注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错。
	访问属性是通过 . 操作符完成的，但这要求属性名必须是一个有效的变量名。
	如果属性名包含特殊字符，就必须用 '' 括起来。访问这个属性也无法使用.操作符，必须用 ['xxx'] 来访问。
	JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。
	JavaScript规定，访问不存在的属性不报错，而是返回undefined。
		var xiaohong = {
		    name: '小红',
		    'middle-school': 'No.1 Middle School'
		};
		xiaohong['middle-school']; // 'No.1 Middle School'
		xiaohong['name']; // '小红'
		xiaohong.name; // '小红'
		console.log(xiaohong.age); // undefined
		xiaoming.age = 18; // 新增一个age属性
		console.log(xiaohong.age); // 18
		delete xiaohong.age; // 删除age属性
		delete xiaohong.school; // 删除一个不存在的school属性也不会报错
	
	2）要检测某对象。是否拥有某一属性，可以用in操作符。
	如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的。 
		'name' in xiaohong; // true
	要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法。
		xiaohong.hasOwnProperty('name'); // true
	
8. 条件判断

	使用if () { ... } else { ... }来进行条件判断。其中else语句是可选的。
	if...else...语句的执行特点是二选一，在多个if...else...语句中，如果某个条件成立，则后续就不再继续判断了。
	JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true。
	
9. 循环

	1）JavaScript的循环有两种，一种是for循环，通过初始条件、结束条件和递增条件来循环执行语句块。
		  for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环。
	   for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来。
	   由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的 索引 ：
			var a = ['A', 'B', 'C'];
			for (var i in a) {
				console.log(i); // '0', '1', '2'
				console.log(a[i]); // 'A', 'B', 'C'
			}
	   请注意，for ... in对Array的循环得到的是String而不是Number。
	
	2）while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。
	
	3）do { ... } while()循环，它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件。
	
	do { ... } while()循环体会至少执行1次，而for和while循环则可能一次都不执行。
	
10. Map和Set: ES6规范引入

	1）Map是一组键值对的结构，具有极快的查找速度。
	   初始化Map需要一个二维数组，或者直接初始化一个空Map。
	   	var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
		m.get('Michael'); // 95
		
		Map具有以下方法：
			var m = new Map(); // 空Map
			m.set('Adam', 67); // 添加新的key-value
			m.set('Bob', 59);
			m.has('Adam'); // 是否存在key 'Adam': true
			m.get('Adam'); // 67
			m.delete('Adam'); // 删除key 'Adam'
			m.get('Adam'); // undefined
		由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉。
		
	2）Set是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。
	   要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set。重复元素在Set中自动被过滤。
	   	var s1 = new Set(); // 空Set
		var s2 = new Set([1, 2, 3]); // 含1, 2, 3
		var s = new Set([1, 2, 3, 3, '3']);
		s; // Set {1, 2, 3, "3"}
	   通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果。 s.add(4);
	   通过delete(key)方法可以删除元素。 s.delete(3);
	   
11. iterable：ES6标准引入

	Array、Map和Set都属于iterable类型。具有iterable类型的集合可以通过新的for ... of循环来遍历。
		var a = ['A', 'B', 'C'];
		a.name = 'Hello';
		for (var x in a) {
		    console.log(x); // '0', '1', '2', 'name'
		}
		var a = ['A', 'B', 'C'];
		a.name = 'Hello';
		for (var x of a) {
		    console.log(x); // 'A', 'B', 'C'
		}
		
	更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：
		'use strict';
		var a = ['A', 'B', 'C'];
		a.forEach(function (element, index, array) {        
			// element: 指向当前元素的值
			// index: 指向当前索引
			// array: 指向Array对象本身
			console.log(element + ', index = ' + index);
		});
		
		A, index = 0
		B, index = 1
		C, index = 2
		
	Set没有索引，因此回调函数的前两个参数都是元素本身：
		var s = new Set(['A', 'B', 'C']);
		s.forEach(function (element, sameElement, set) {
			console.log(element);
		});
		
		A
		B
		C
	
	Map的回调函数参数依次为value、key和map本身：
		var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
		m.forEach(function (value, key, map) {
			console.log(value);
		});
		
		x
		y
		z
		
	如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element：
		var a = ['A', 'B', 'C'];
		a.forEach(function (element) {
			console.log(element);
		});
	
12. 函数
	
	
	
	
	
	
	
	      
	
	
	
	
	
	
	
	
	
	
	
	
	
	
