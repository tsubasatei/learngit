learn git 

1. Git全局配置和单个仓库的用户名邮箱配置

	1)全局的用户名和邮箱：--global参数，表示你这台机器上所有的Git仓库都会使用这个配置，--list查看所有配置信息
	$ git config --global user.name "tsubasatei"
	$ git config --global user.email "tsubasa310@163.com"
	$ git config --list 
	
	使用如下命令可以取消全局设置：
	git config --global --unset user.name
	git config --global --unset user.email

    2)针对不同的项目, 在项目根目录下进行单独配置：--list查看当前配置, 在当前项目下面查看的配置是全局配置+当前项目的配置, 使用的时候会优先使用当前项目的配置
	$ git config user.name "xiting"
	$ git config user.email "337283708@qq.com"
	$ git config --list
	
	
2. 创建仓库

	1）初始化一个Git仓库，使用git init命令。

	2）添加文件到Git仓库，分两步：
	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件。实际上就是把文件修改添加到暂存区。
	第二步，使用命令git commit -m "xxx" 完成提交更改。-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。实际上就是把暂存区的所有内容提交到当前分支。
	
	3）要随时掌握工作区的状态，使用git status命令。

	4）如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	
	
3. 版本回退
	
	1）HEAD指向的版本就是当前版本，上一个版本就是HEAD^，上100个版本写成HEAD~100。
	因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。commit_id版本号没必要写全，前几位就可以了。

	2）穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。嫌输出信息太多使用git log --pretty=oneline
	如：$ git reset --hard HEAD^  回退到上一版本

	3）要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

	
4. 工作区和暂存区

	1）工作区（Working Directory）

	就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。
	
	2）版本库（Repository）

	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	

5. 管理修改
	
	Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
	
	Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。
	git diff HEAD -- readme.txt 命令可以查看工作区和版本库里面最新版本的区别。
	第一次修改 -> git add -> 第二次修改 -> git add -> git commit
	
	
6. 撤销修改

	1）命令git checkout -- readme.txt 意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令。
	
	2）命令git reset HEAD file 可以把暂存区的修改撤销掉（unstage），重新放回工作区。
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
	
	
7. 删除文件

	1）命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
	
	2）git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
	

8. 远程仓库

	本地Git仓库和GitHub仓库之间的传输是通过SSH加密的。
	
	第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
	1）生成单个SSH Key，输入下面的命令：
		$ ssh-keygen -t rsa -C "tsubasa310@163.com"
	然后一路回车，使用默认值即可，不输入密钥文件名字和密码。由于这个Key也不是用于军事目的，所以也无需设置密码。
	如果一切顺利的话，可以在用户主目录里找到.ssh目录（【C:\Users\用户名.ssh】下产生两个文件），
	里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	
	2）管理git生成的多个ssh key
	
		a）生成第一个ssh key（这里我用的是github的邮箱）
		ssh-keygen -t rsa -C "tsubasa310@163.com"
	进入【C:\Users\用户名.ssh】，点击鼠标右键-选择Git bash here，
	这一步很重要，不然在下面输入密钥名称的时候，会将密钥生成在当前打开git bash的路径下，比如我在桌面打开的git bash，就会生成在桌面上，当然也可以在输入名称前将路径补全，
	给生成的密钥命名为【id_rsa_github】,下面连续两次回车，没有给密钥设置密码。
	
		b）生成另一个ssh key（这里我用的公司邮箱）
		ssh-keygen -t rsa -C "337283708@qq.com"
		
		c）执行ssh-agent命令
		ssh-agent就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程
	
		d)添加私钥
		ssh-add ~/.ssh/id_rsa_github
		ssh-add ~/.ssh/id_rsa_gitlab

	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
	然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容;点“Add Key”，你就应该看到已经添加的Key。
	测试看到如下输出表示配置成功:
	ssh -T git@github.com          #测试github
	ssh -T git@gitool.glanway.com   #测试gitlab
	
	
9. 添加远程库

	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	可以通过如下命令进行代码合并【注：pull=fetch+merge】：git pull --rebase origin master
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

	分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
	
	
10. 从远程库克隆

	要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
	如：git clone git@github.com:tsubasatei/gitskills.git
	或：git clone https://github.com/tsubasatei/gitskills.git
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
	

11. 创建与合并分支
	
	HEAD指向的就是当前分支。Git鼓励大量使用分支。

	查看分支：git branch， 命令会列出所有分支，当前分支前面会标一个*号。

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>
	
	
12. 解决冲突

	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
	用git log --graph命令可以看到分支合并图。如：git log --graph --pretty=oneline --abbrev-commit
	
	
13. 分支管理策略

	1）分支策略：
	在实际开发中，我们应该按照几个基本原则进行分支管理：
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	
	2）合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	注意--no-ff参数，表示禁用Fast forward，加上-m参数，把commit描述写进去。
	git merge --no-ff -m "merge with no-ff" dev
	
	
	
	
	
	
	
	
	
	
